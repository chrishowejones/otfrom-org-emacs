;;; tsi-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from tsi.el

(autoload 'tsi--walk "tsi" "\
Indents the current line using information provided by INDENT-INFO-FN.

INDENT-INFO-FN is a function taking two arguments: (current-node parent-node).

(fn INDENT-INFO-FN)")
(autoload 'tsi-calculate-indentation "tsi" "\
Calculates the indentation for the current line using INDENT-INFO-FN.

If optional EXTRA-INDENT-FOR-CURRENT-LINE-FN is provided, will
add the extra indentation amount returned by that function to the
indent column. This is useful to handle special cases for the
current line.

(fn INDENT-INFO-FN &optional EXTRA-INDENT-FOR-CURRENT-LINE-FN)")
(autoload 'tsi-indent-line "tsi" "\
Indents the current line the number of characters returned by INDENT-INFO-FN.

If optional EXTRA-INDENT-FOR-CURRENT-LINE-FN is provided, will
add the extra indentation amount returned by that function to the
indent column. This is useful to handle special cases for the
current line.

(fn INDENT-INFO-FN &optional EXTRA-INDENT-FOR-CURRENT-LINE-FN)")
(register-definition-prefixes "tsi" '("tsi-"))


;;; Generated autoloads from tsi-css.el

(autoload 'tsi-css--indent-line "tsi-css" "\
Internal function.

  Calculate indentation for the current line.")
(autoload 'tsi-css-mode "tsi-css" "\
Use tree-sitter to calculate indentation for CSS buffers.

This is a minor mode.  If called interactively, toggle the
`Tsi-Css mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `tsi-css-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "tsi-css" '("tsi-css-"))


;;; Generated autoloads from tsi-json.el

(autoload 'tsi-json--indent-line "tsi-json" "\
Internal function.

  Calculate indentation for the current line.")
(autoload 'tsi-json-mode "tsi-json" "\
Use tree-sitter to calculate indentation for JSON buffers.

This is a minor mode.  If called interactively, toggle the
`Tsi-Json mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `tsi-json-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "tsi-json" '("tsi-json-"))


;;; Generated autoloads from tsi-typescript.el

(autoload 'tsi-typescript--indent-line "tsi-typescript" "\
Internal function.

   Indent the current line.")
(autoload 'tsi-typescript-mode "tsi-typescript" "\
Use tree-sitter to calculate indentation for Typescript buffers.

This is a minor mode.  If called interactively, toggle the
`Tsi-Typescript mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `tsi-typescript-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "tsi-typescript" '("tsi-"))


;;; Generated autoloads from tsi.test.el

(register-definition-prefixes "tsi.test" '("tsi--test-indent-fn"))

;;; End of scraped data

(provide 'tsi-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; tsi-autoloads.el ends here
