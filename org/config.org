* Helpers

  There are a number of helper functions that we'll need through the
  rest of this. We'll just define them up here.

** load-if-exists

   This is just a nice function to load a file if it exists, but just
   print a message rather than an error if it doesn't. This is handy
   for things like loading specific local config that you don't want
   to go into github or be shared such as erc nicks, passwords, blog
   rolls, etc.

   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (file)
       (if (file-exists-p file)
           (progn
             (load file)
             (message (format "Loading file: %s" file)))
         (message (format "No %s file. So not loading one." file))))   
   #+END_SRC

* Globals

** Hippie Expand

   I have a soft spot for hippie-expand. There might be better ways to
   do this though and I'm happy to take advice from anyone with a
   strong opinion. :-D

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-RET") 'hippie-expand)
   #+END_SRC

** upcase and downcase region

   I like to be able to do this. I get lots of things that come in
   SHOUTING or that need to SHOUT.

   #+BEGIN_SRC emacs-lisp
     (put 'downcase-region 'disabled nil)
     (put 'upcase-region 'disabled nil)
   #+END_SRC

** diminish

   As we add lots of useful minor-modes the mode line can get a bit
   unwieldy. diminish-mode helps us with that. We'll set it up here
   and use it in various places throughout the setup.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'diminish)
   #+END_SRC
   
* non-elpa files

  Unfortunately, we can't get everything we want from the package
  archives or we might have files that we're working on locally that
  we haven't released yet. We keep those in a non-elpa directory. We
  need to add this to the load-path so that we can require the files
  we have here.

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/non-elpa/")
  #+END_SRC

* Make it Pretty

** color themes

   I really like the cyberpunk theme from [[https://github.com/overtone/emacs-live][emacs-live]] and [[https://twitter.com/samaaron][Sam Aaron]] is
   a lovely guy. I wanted to avoid needing the old color-theme
   mode. [[https://twitter.com/rikardglans][Rikard Glans]] was nice enought to port it over to the new
   stuff. I've included it in non-elpa so that I can carry it
   around. I don't actually want to use it at the moment.

   What I'd like to use instead is calmer-forest, at least for now. I
   do need to find a good high contrast theme for using on the *very*
   low contrast projectors at [[http://www.skillsmatter.com][Skills Matter]].

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'calmer-forest-theme)
     (load-theme 'calmer-forest t)
   #+END_SRC

** bars, menus and numbers

   I like no scroll bars, no toolbars and line and column numbers in
   the mode-line. I like having the menus, unless I"m in a terminal as
   I sometimes discover keybindings or functions I wasn't aware of
   before.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (line-number-mode 1)
     (column-number-mode 1)
   #+END_SRC

** Startup Screen

   I'd also like to ski the startup screen and go straight to
   the *scratch* buffer.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC
   
* helm-mode

  helm-mode is the succesor to anything.el. I don't really have my
  head around it all yet, but I'm already pretty impressed with it so
  I'll include it here and add more to it as I understand what is
  going on.

  My helm-mode guru is [[http://twitter.com/krisajenkins][Kris Jenkins]].
  
  #+BEGIN_SRC emacs-lisp
    (maybe-install-and-require 'helm)
    (helm-mode 1)
  #+END_SRC

  We can diminish how much room helm-mode takes up on the command
  line.

  #+BEGIN_SRC emacs-lisp
    (diminish 'helm-mode "h")
  #+END_SRC
  
* git

** magit

   magit is a *fantastic* mode for dealing with git.
   
   #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'magit)
   #+END_SRC
   
   I use magit-status a lot. So let's bind it to C-x g.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC

** git-gutter-mode+

   It is really nice having +/= in the gutter. I like it more than
   having line numbers and thus I've dumped linum-mode.
   
   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'git-gutter-fringe+)
     (global-git-gutter+-mode t)
   #+END_SRC

   It is also quite nice to be able to navigate a file by he git
   hunks. It makes it a bit easier to see what has changed since the
   last time in the context of the whole file.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "s-n") 'git-gutter+-next-hunk)
     (global-set-key (kbd "s-p") 'git-gutter+-previous-hunk)
   #+END_SRC

   We can diminish the size of GitGutter in the mode-line

   #+BEGIN_SRC emacs-lisp
     (diminish 'git-gutter+-mode)
   #+END_SRC
   
* Communication Modes

** twittering-mode

   I have been accused by many ([[http://twitter.com/rrees][Robert Rees]] and [[http://twitter.com/cluttercup][Jane Dickson]] to name
   but two) of being constantly on twitter. This is mostly fair. I'm
   curious to see the revision history of this file and see if I
   change this description before I declare .emacs bankruptcy again.

   The best twitter client I've found is twittering-mode. 

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'twittering-mode)    
   #+END_SRC

   I *don't* want to see the the status messages in the mini-buffer
   when twitter fetches things.
   
   #+BEGIN_SRC emacs-lisp
     (setq twittering-url-show-status nil)
   #+END_SRC

   I like to have the icon pictures.
      
   #+BEGIN_SRC emacs-lisp
     (setq twittering-icon-mode 1)
     (setq twittering-use-icon-storage t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-hook 'twittering-edit-mode-hook
         (lambda () (ispell-minor-mode) (flyspell-mode)))
   #+END_SRC

   You can configure it to use a local, encrypted file for the
   credentials as well, which makes re-connecting easier and
   reasonably secure.

   This didn't really work until I fixed the exec-path to get gpg in
   it, which is in /usr/local/bin on my machine, so you need to add
   the bits from [[$PATH is broken][$PATH is broken]] in the [[Macintosh Specific Setup][Macintosh Specific Setup]].

   #+BEGIN_SRC emacs-lisp
     (setq twittering-use-master-password t)
   #+END_SRC

   By default I want to get my replies and direct messages.

   #+BEGIN_SRC emacs-lisp
     (setq twittering-initial-timeline-spec-string
           '(":replies"
             ":direct_messages"))   
   #+END_SRC
   
* Macintosh Specific Setup

** # is broken on UK Macs

   On UK keyboards shift-3 is bound to £. This is a real pain. The #
   character is usually bound to M-3. This also causes problems,
   especially with things like window-number modes. We have a hacked
   window-number mode below that maps window 3 to s-3, which solves
   that problem. The # problem is solved with this bit of code below.
   
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
   #+END_SRC

   We also need to deal with £ being a UTF-8 character so we don't get
   annoying Â characters before non-ascii characters.

   #+BEGIN_SRC emacs-lisp
     (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
   #+END_SRC
   
** window-number-super mode

   On a mac we have M-3 mapped to be the

   #+BEGIN_SRC emacs-lisp
     (require 'window-number-super)
     (window-number-mode 1) ;; for the window numbers
     (window-number-super-mode 1) ;; for the super key binding        
   #+END_SRC
   
** $PATH is broken

   If you don't run emacs in a terminal on Mac OS X then it can be
   really awkward to get the stuff you want in your path. This is the
   best way I've found so far to sort this out and get things like
   ~/bin and /usr/loca/bin in a $PATH that emacs can access. I quite
   like running emacs from outside the terminal.

   I should really make this detect that it isn't running in a
   terminal and that it is running on Mac OS X so that I'm not doing
   a bunch of extra stuff if I don't need to.

   #+BEGIN_SRC emacs-lisp
     (setq exec-path '((concat (getenv "HOME") "/bin")
                       "/usr/local/bin"
                       "/usr/bin"
                       "/bin"
                       "/usr/sbin"
                       "/sbin"
                       "/usr/X11/bin"))     
   #+END_SRC
* Local Config
** custom.el

   custom.el is great for configuring things through that "gui" in
   emacs, but it is a real pain when it drops junk in your [[../init.el][init.el]] and
   messes up your pretty config and git history and is stuff that you
   don't want to leak out on to github. You can change the location of
   this file though and I like to do this.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/local/custom.el")
     (load-if-exists custom-file)
   #+END_SRC
