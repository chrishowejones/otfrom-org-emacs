* Helpers

  There are a number of helper functions that we'll need through the
  rest of this. We'll just define them up here.

** load-if-exists

   This is just a nice function to load a file if it exists, but just
   print a message rather than an error if it doesn't. This is handy
   for things like loading specific local config that you don't want
   to go into github or be shared such as erc nicks, passwords, blog
   rolls, etc.

   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (file)
       (if (file-exists-p file)
           (progn
             (load file)
             (message (format "Loading file: %s" file)))
         (message (format "No %s file. So not loading one." file))))   
   #+END_SRC

* Globals

** Hippie Expand

   I have a soft spot for hippie-expand. There might be better ways to
   do this though and I'm happy to take advice from anyone with a
   strong opinion. :-D

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-RET") 'hippie-expand)
   #+END_SRC

** upcase and downcase region

   I like to be able to do this. I get lots of things that come in
   SHOUTING or that need to SHOUT.

   #+BEGIN_SRC emacs-lisp
     (put 'downcase-region 'disabled nil)
     (put 'upcase-region 'disabled nil)
   #+END_SRC

** diminish

   As we add lots of useful minor-modes the mode line can get a bit
   unwieldy. diminish-mode helps us with that. We'll set it up here
   and use it in various places throughout the setup.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'diminish)
   #+END_SRC
   
** Tabs are Evil

   I mean, not like evil-mode is good for vi users who want to use
   emacs, which is fine, and obviously not like a truly evil thing,
   but you know, not what I want. Hey, I can use hyperbole in my
   org-mode files if I want to.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** uniquify

   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'post-forward)   
   #+END_SRC
 
* non-elpa and work arounds

  At the moment we don't have any workarounds. It looked like we might
  need one for cider for a while but the marvelously helpful grand
  master of the [[https://github.com/clojure-emacs][clojure Emacs repo]] [[http://twitter.com/bbatsov][Bozhidar Batsov]] has fixed it.

** non-elpa files

   Unfortunately, we can't get everything we want from the package
   archives or we might have files that we're working on locally that
   we haven't released yet. We keep those in a non-elpa directory. We
   need to add this to the load-path so that we can require the files
   we have here.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (concat user-emacs-directory "non-elpa/"))
   #+END_SRC
   
* Macintosh Specific Setup

** # is broken on UK Macs

   On UK keyboards shift-3 is bound to £. This is a real pain. The #
   character is usually bound to M-3. This also causes problems,
   especially with things like window-number modes. We have a hacked
   window-number mode below that maps window 3 to s-3, which solves
   that problem. The # problem is solved with this bit of code below.
   
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
   #+END_SRC

   We also need to deal with £ being a UTF-8 character so we don't get
   annoying Â characters before non-ascii characters.

   #+BEGIN_SRC emacs-lisp
     (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
   #+END_SRC
   
** window-number-super mode

   On a mac we have M-3 mapped to be the

   #+BEGIN_SRC emacs-lisp
     (require 'window-number-super)
     (window-number-mode 1) ;; for the window numbers
     (window-number-super-mode 1) ;; for the super key binding        
   #+END_SRC
   
** $PATH is broken

   If you don't run emacs in a terminal on Mac OS X then it can be
   really awkward to get the stuff you want in your path. This is the
   best way I've found so far to sort this out and get things like
   ~/bin and /usr/loca/bin in a $PATH that emacs can access. I quite
   like running emacs from outside the terminal.

   Thanks to the lovely and helpful [[https://twitter.com/_tobrien][Tom O'Brien]] I've got a better way
   of doing this and now my emacs environment will be in sync with my
   shell. You can out more at the github page for
   [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]].

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'exec-path-from-shell)
     (when (memq window-system '(mac ns))
       (exec-path-from-shell-initialize))
   #+END_SRC

* Make it Pretty

** color themes

*** custom-theme-directory

    Themes seem to be quite picky about where they live. They require
    custom-theme-directory to be set. By default this is the same as
    user-emacs-directory, which is usually ~/.emacs.d. I'd like to
    keep them separate if possible. I learned this one by reading
    some of [[https://github.com/sw1nn/dotfiles][Neale Swinnerton's dotfiles]].

    #+BEGIN_SRC emacs-lisp
      (setq custom-theme-directory (concat user-emacs-directory "themes"))
    #+END_SRC

*** cyberpunk
    
    I really like the cyberpunk theme from [[https://github.com/overtone/emacs-live][emacs-live]] and [[https://twitter.com/samaaron][Sam Aaron]] is
    a lovely guy. I wanted to avoid needing the old color-theme
    mode. [[https://twitter.com/rikardglans][Rikard Glans]] was nice enought to port it over to the new
    stuff.

    #+BEGIN_SRC emacs-lisp
      (load-theme 'emacslive-cyberpunk t)
    #+END_SRC

** fonts

   Ah, the joys of playing with different monospaced fonts on
   emacs. Menlo seems to be the one I'm happiest with on my MBA.

   #+BEGIN_SRC emacs-lisp
     (when (memq window-system '(mac ns))
       (set-default-font "-apple-Menlo-medium-normal-normal-*-12-*-*-*-m-0-iso10646-1"))
   #+END_SRC
   
** bars, menus and numbers

   I like no scroll bars, no toolbars and line and column numbers in
   the mode-line. I like having the menus, unless I"m in a terminal as
   I sometimes discover keybindings or functions I wasn't aware of
   before.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (line-number-mode 1)
     (column-number-mode 1)
   #+END_SRC

** Startup Screen

   I'd also like to ski the startup screen and go straight to
   the *scratch* buffer.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC

** alpha alpha alpha

   I don't use this all the time, but sometimes, when I'm hacking
   only on my diddy 13" laptop I like to have a window tailing a file
   in the background while I'm writing something in the
   foreground. This let's us toggle transparency. Who wouldn't like
   that? I'm pretty sure I got this from [[https://twitter.com/IORayne][Anthony Grimes]]. 
   
   #+BEGIN_SRC emacs-lisp
     (defun toggle-transparency ()
       (interactive)
       (let ((param (cadr (frame-parameter nil 'alpha))))
         (if (and param (/= param 100))
             (set-frame-parameter nil 'alpha '(100 100))
           (set-frame-parameter nil 'alpha '(85 50)))))
     (global-set-key (kbd "C-c t") 'toggle-transparency)
   #+END_SRC

* directories, navigation, searching
** dired

   dired can do lots of things. I'm pretty basic in my use. I do like
   to have the file listings use human friendly numbers though.

   #+BEGIN_SRC emacs-lisp
     (setq dired-listing-switches "-alh")
   #+END_SRC

** helm-mode

   helm-mode is the succesor to anything.el. I don't really have my
   head around it all yet, but I'm already pretty impressed with it so
   I'll include it here and add more to it as I understand what is
   going on.

   My helm-mode guru is [[http://twitter.com/krisajenkins][Kris Jenkins]].
   
   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'helm)
     (helm-mode 1)
   #+END_SRC

   We can diminish how much room helm-mode takes up on the command
   line.

   #+BEGIN_SRC emacs-lisp
     (diminish 'helm-mode)
   #+END_SRC
   
** git

*** magit

    magit is a *fantastic* mode for dealing with git.
    
    #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'magit)
    #+END_SRC
    
    I use magit-status a lot. So let's bind it to C-x g.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x g") 'magit-status)
    #+END_SRC

*** git-gutter-mode+

    It is really nice having +/= in the gutter. I like it more than
    having line numbers and thus I've dumped linum-mode.
    
    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'git-gutter-fringe+)
      (global-git-gutter+-mode t)
    #+END_SRC

    It is also quite nice to be able to navigate a file by he git
    hunks. It makes it a bit easier to see what has changed since the
    last time in the context of the whole file.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "s-n") 'git-gutter+-next-hunk)
      (global-set-key (kbd "s-p") 'git-gutter+-previous-hunk)
    #+END_SRC

    We can diminish the size of GitGutter in the mode-line

    #+BEGIN_SRC emacs-lisp
      (diminish 'git-gutter+-mode)
    #+END_SRC
    
** ace-jump-mode

   Move quickly anywhere in the buffer in 3 keystrokes. We can move
   there with C-c j and back to where we started with C-c k.
   
   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'ace-jump-mode)
     (global-set-key (kbd "C-c j") 'ace-jump-mode)
     (global-set-key (kbd "C-c k") 'ace-jump-mode-pop-mark)
   #+END_SRC
   
* Communication Modes

** twittering-mode

   I have been accused by many ([[http://twitter.com/rrees][Robert Rees]] and [[http://twitter.com/cluttercup][Jane Dickson]] to name
   but two) of being constantly on twitter. This is mostly fair. I'm
   curious to see the revision history of this file and see if I
   change this description before I declare .emacs bankruptcy again.

   The best twitter client I've found is twittering-mode. 

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'twittering-mode)    
   #+END_SRC

   I *don't* want to see the the status messages in the mini-buffer
   when twitter fetches things.
   
   #+BEGIN_SRC emacs-lisp
     (setq twittering-url-show-status nil)
   #+END_SRC

   I like to have the icon pictures.
      
   #+BEGIN_SRC emacs-lisp
     (setq twittering-icon-mode 1)
     (setq twittering-use-icon-storage t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-hook 'twittering-edit-mode-hook
         (lambda () (ispell-minor-mode) (flyspell-mode)))
   #+END_SRC

   You can configure it to use a local, encrypted file for the
   credentials as well, which makes re-connecting easier and
   reasonably secure.

   This didn't really work until I fixed the exec-path to get gpg in
   it, which is in /usr/local/bin on my machine, so you need to add
   the bits from [[$PATH is broken][$PATH is broken]] in the [[Macintosh Specific Setup][Macintosh Specific Setup]].

   #+BEGIN_SRC emacs-lisp
     (setq twittering-use-master-password t)
   #+END_SRC

   By default I want to get my replies and direct messages.

   #+BEGIN_SRC emacs-lisp
     (setq twittering-initial-timeline-spec-string
           '(":replies"
             ":direct_messages"))   
   #+END_SRC
   
* Programming Modes
** prog-mode

   prog-mode and the prog-mode-hook are at the basis of most of the
   programming modes in emacs. If we want something set up for
   everything we should do it here.
   
*** Parentheses
**** Show Them

     We really want to see those parentheses. 
     
     #+BEGIN_SRC emacs-lisp
       (show-paren-mode +1)
     #+END_SRC

**** paredit-mode

     Should I move over to smartparens? Can anyone tell me what is so
     much better about it?

     paredit-mode is a strange one. When you first use it, you will
     hate it. You'll hate the way it won't let you do the things
     you *think* you want to do. Once you get used to it though you
     wonder how you ever did any programming without it.

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'paredit)
       (diminish 'paredit-mode "()")
       (add-hook 'prog-mode-hook 'paredit-mode)
     #+END_SRC

*** rainbow-delimiters

    Make those delimiters glow with wacky colors so we can see what is
    going on.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'rainbow-delimiters)
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    #+END_SRC

*** rainbow mode

    If we have a color literal it is really nice to have an idea of
    what it is going to look like. This is *really* useful in things
    like editing CSS files with hex color codes.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'rainbow-mode)
      (add-hook 'prog-mode-hook 'rainbow-mode)
      (diminish 'rainbow-mode)
    #+END_SRC

*** highlight-symbol

    I like to see all of the places I'm using the same symbol. This is
    a great visual cue for those times where you've mistyped a variable
    for function name. It isn't quite flymake, but it is handy. It is
    good to see where something is used as well.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'highlight-symbol)
      (add-hook 'prog-mode-hook 'highlight-symbol-mode)
    #+END_SRC
    
** lisp modes

   emacs-lisp and clojure are the two that really go in here for now,
   though in the future scheme and common lisp could be added.

*** lisp hooks

    These are the common lisp hooks we want shared across all lisp
    modes.

    #+BEGIN_SRC emacs-lisp
            (setq lisp-hooks (lambda ()
                               (eldoc-mode +1)
                               (diminish 'eldoc-mode)
                               (define-key paredit-mode-map
                                 (kbd "{") 'paredit-open-curly)
                               (define-key paredit-mode-map
                                 (kbd "}") 'paredit-close-curly)))
    #+END_SRC

*** emacs-lisp

**** lisp-mode-hook

     Let's add the lisp mode hook to the emacs-lisp-mode

     #+BEGIN_SRC emacs-lisp
       (add-hook 'emacs-lisp-mode-hook lisp-hooks)
     #+END_SRC

*** clojure

    I do *love* coding in clojure. The tool chain has been evolving
    quite a bit over the last few years.

    Everything has gone from being built only with maven to maven
    being just for core and everything else being done with [[http://leiningen.org/][Leiningen]].

    On the emacs side we've gone from the swank and slime, to nrepl
    and nrepl.el, to now we have nrepl and cider.el. Trying to move to
    cider.el is what caused me to declare .emacs.d bankruptcy this
    time and restructure everything.

    Most of the clojure emacs goodness if available in the github
    repo called [[https://github.com/clojure-emacs][clojure-emacs]].

**** cider
     
     You can get most of the clojure support by just elpa installing
     cider.

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'cider)
     #+END_SRC
     
     Adding clojure-test-mode is a good idea too. Lots of things out
     there using the built in clojure.test.

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'clojure-test-mode)     
     #+END_SRC
     
     We'll also want to get our lisp-hooks into our clojurey
     goodness. It would be a shame to not have it here.

     #+BEGIN_SRC emacs-lisp
       (add-hook 'clojure-mode-hook lisp-hooks)
     #+END_SRC
     
     There are more things that we'll want that are specific to cider
     mode and the cider interaction buffer.

     #+BEGIN_SRC emacs-lisp
       (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
       (add-hook 'cider-interaction-mode-hook 'cider-turn-on-eldoc-mode)
     #+END_SRC
     
     We also want to save the history of our interactions. There might
     be gold there.

     #+BEGIN_SRC emacs-lisp
       (setq cider-history-file (concat user-emacs-directory "cider-history"))
     #+END_SRC
     
     I also want to be able to navigate to the "-" characters in words.

     #+BEGIN_SRC emacs-lisp
       (add-hook 'cider-mode-hook 'subword-mode)
     #+END_SRC

**** helm and clojure

     Kris Jenkins has a great helm-clojure-headlines that I'd like to
     bind to s-h when in clojure-mode.

     #+BEGIN_SRC emacs-lisp
       (defun helm-clojure-headlines ()
         "Display headlines for the current Clojure file."
         (interactive)
         (helm :sources '(((name . "Clojure Headlines")
                           (volatile)
                           (headline "^[;(]")))))
       
       (add-hook 'clojure-mode-hook
                 (lambda () (local-set-key (kbd "s-h") 'helm-clojure-headlines)))
     #+END_SRC

**** Clojure Cheat Sheet

     It was this helm addon from Kris Jenkins that made me start to
     look at helm. And having the clojure cheat sheet to hand is
     useful.

     I like binding cheatsheets to s-f9.

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'clojure-cheatsheet)
       (add-hook 'clojure-mode-hook
                 (lambda () (local-set-key [s-f1] 'clojure-cheatsheet)))
     #+END_SRC
     
** pastebins

   gist, pastebin, refheap. All good ways of sharing snippets of code
   with people on irc or similar.

*** refheap

    I like [[http://refheap.com][refheap]] and Anthony Grimes seems like a nice guy. And it
    is built in clojure.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'refheap)
    #+END_SRC

* Text Modes
** Text Mode Basics

   If we are in a text mode we want flyspell and auto-fill-mode.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook
               (lambda ()
                       (flyspell-mode 1)
                       (diminish 'flyspell-mode)
                       (auto-fill-mode 1)
                       (diminish 'auto-fill-function)))
   #+END_SRC

** deft and org

*** deft

    deft-mode is a Notational Velocity like note taker. I really like
    it for finding notes that are already there. The way it searches
    for notes reminds me quite a lot of helm, so I'm wondering if I
    might replace this with helm and org-mode. That would be one to ask
    Kris Jenkins.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'deft)
    #+END_SRC

    We want to keep our deft notes in ~/org/deft

    #+BEGIN_SRC emacs-lisp
      (setq deft-directory "~/org/deft/")
    #+END_SRC

    We want the notes to be in org-mode format

    #+BEGIN_SRC emacs-lisp
      (setq deft-extension "org")
      (setq deft-text-mode 'org-mode)
    #+END_SRC

    And we want f8 to be the key to get us to the top level search
    list.

    #+BEGIN_SRC emacs-lisp
      (global-set-key [f8] 'deft)
    #+END_SRC

*** org-mode

    I also use org-mode on its own and would like to use it more. I
    used to be a complete planner-mode addict. I've never really
    gotten into org-mode in the same way. Having a way to sync to
    trello and link to my email, magit and everything else keeps
    making me want to try though.

**** fontify

     This is all written in org-mode. It would be good if the source
     code examples were fonitfies according to their major mode.

     #+BEGIN_SRC emacs-lisp
       (setq org-src-fontify-natively t)
     #+END_SRC

**** spelling

     On a Mac we need to tell org-mode to use aspell, which we
     installed using homebrew.

     #+BEGIN_SRC emacs-lisp
       (setq ispell-program-name (executable-find "aspell"))
     #+END_SRC

**** org-headlines

     Just like in [[helm and clojure]] we'd like to be able to look at
     the headlines in org-mode too.
     
     #+BEGIN_SRC emacs-lisp
       (add-hook 'org-mode-hook
                 (lambda () (local-set-key (kbd "s-h") 'helm-org-headlines)))
     #+END_SRC

**** org-cheatsheet

     Having cheatsheets around is handy. Especially for sprawling
     modes like org-mode.

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'helm-orgcard)
       (add-hook 'org-mode-hook
                        (lambda () (local-set-key [s-f1] 'helm-orgcard)))
     #+END_SRC

* Local Config
** custom.el

   custom.el is great for configuring things through that "gui" in
   emacs, but it is a real pain when it drops junk in your [[../init.el][init.el]] and
   messes up your pretty config and git history and is stuff that you
   don't want to leak out on to github. You can change the location of
   this file though and I like to do this.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/local/custom.el")
     (load-if-exists custom-file)
   #+END_SRC
* Finishing

** passwords and encrypted things

   It is good to store your passwords and things in an encrypted
   file. I call mine mellon, because you can only read it if you are
   my friend and have the passphrase.

   This does mean that every time you use it you have to give the
   passphrase, but it does mean that you can keep all your passwords
   for things like erc and stuff in a file reasonably safely (though
   it will be in memory when emacs is running, so it isn't completely
   secure).

   #+BEGIN_SRC emacs-lisp
     (load-if-exists (concat user-emacs-directory "local/mellon.el.gpg"))
   #+END_SRC
   
** emacs-server

   Emacs startup time isn't nearly as much of a problem as it used to
   be. I'm also pretty patient as I've been working with JVM startup
   times over the years.

   However, it is still nice to be able to attach to a running Emacs
   process when we want to. To that end, let's start up an
   emacs-server.

   #+BEGIN_SRC emacs-lisp
     (server-start)
   #+END_SRC

** Finis

   I should really come up with better exhortations than this. The
   stuff that Sam Aaron has in emacs-live I actually find quite
   inspirational. cider.el has similar, though more specifically
   clojurian things to say that I quite like as well.

   However, I've always expected that any sufficiently advanced lisp
   system has probably gained sentience. I think Emacs probably
   qualifies for that.

   Therefore, let's sign off as so...

   #+BEGIN_SRC emacs-lisp
     (message "Cogito ergo sum.")
   #+END_SRC
